"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var integration_body_exports = {};
__export(integration_body_exports, {
  prepareUpdateIntegrationBody: () => prepareUpdateIntegrationBody
});
module.exports = __toCommonJS(integration_body_exports);
var utils = __toESM(require("../utils"));
const prepareUpdateIntegrationBody = (localIntegration, remoteIntegration) => {
  const actions = utils.records.setNullOnMissingValues(localIntegration.actions, remoteIntegration.actions);
  const events = utils.records.setNullOnMissingValues(localIntegration.events, remoteIntegration.events);
  const states = utils.records.setNullOnMissingValues(localIntegration.states, remoteIntegration.states);
  const user = {
    ...localIntegration.user,
    tags: utils.records.setNullOnMissingValues(localIntegration.user?.tags, remoteIntegration.user?.tags)
  };
  const channels = prepareUpdateIntegrationChannelsBody(localIntegration.channels ?? {}, remoteIntegration.channels);
  return {
    ...localIntegration,
    actions,
    events,
    states,
    user,
    channels
  };
};
const prepareUpdateIntegrationChannelsBody = (localChannels, remoteChannels) => {
  const channelBody = {};
  const zipped = utils.records.zipObjects(localChannels, remoteChannels);
  for (const [channelName, [localChannel, remoteChannel]] of Object.entries(zipped)) {
    if (localChannel && remoteChannel) {
      channelBody[channelName] = prepareUpdateIntegrationChannelBody(localChannel, remoteChannel);
    } else if (localChannel) {
      channelBody[channelName] = localChannel;
      continue;
    } else if (remoteChannel) {
      channelBody[channelName] = null;
      continue;
    }
  }
  return channelBody;
};
const prepareUpdateIntegrationChannelBody = (localChannel, remoteChannel) => ({
  ...localChannel,
  messages: utils.records.setNullOnMissingValues(localChannel?.messages, remoteChannel.messages),
  message: {
    ...localChannel?.message,
    tags: utils.records.setNullOnMissingValues(localChannel?.message?.tags, remoteChannel.message.tags)
  },
  conversation: {
    ...localChannel?.conversation,
    tags: utils.records.setNullOnMissingValues(localChannel?.conversation?.tags, remoteChannel.conversation.tags)
  }
});
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  prepareUpdateIntegrationBody
});
//# sourceMappingURL=integration-body.js.map
