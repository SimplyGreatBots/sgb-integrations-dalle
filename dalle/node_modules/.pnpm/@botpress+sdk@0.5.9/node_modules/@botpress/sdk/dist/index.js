"use strict";var X=Object.create;var B=Object.defineProperty;var Y=Object.getOwnPropertyDescriptor;var ee=Object.getOwnPropertyNames;var te=Object.getPrototypeOf,ne=Object.prototype.hasOwnProperty;var O=(t,e)=>{for(var n in e)B(t,n,{get:e[n],enumerable:!0})},F=(t,e,n,r)=>{if(e&&typeof e=="object"||typeof e=="function")for(let o of ee(e))!ne.call(t,o)&&o!==n&&B(t,o,{get:()=>e[o],enumerable:!(r=Y(e,o))||r.enumerable});return t};var G=(t,e,n)=>(n=t!=null?X(te(t)):{},F(e||!t||!t.__esModule?B(n,"default",{value:t,enumerable:!0}):n,t)),oe=t=>F(B({},"__esModule",{value:!0}),t);var Ae={};O(Ae,{Bot:()=>E,BotSpecificClient:()=>I,Integration:()=>P,IntegrationDefinition:()=>b,IntegrationSpecificClient:()=>u,botIdHeader:()=>f,botUserIdHeader:()=>U,configurationHeader:()=>m,integrationIdHeader:()=>A,messages:()=>w,operationHeader:()=>h,parseBody:()=>p,serve:()=>y,typeHeader:()=>D,webhookIdHeader:()=>k});module.exports=oe(Ae);var w={};O(w,{defaults:()=>de});var i=require("zod"),g=i.z.string().min(1),se=i.z.object({text:g}),re=i.z.object({markdown:g}),ae=i.z.object({imageUrl:g}),ie=i.z.object({audioUrl:g}),ge=i.z.object({videoUrl:g}),ce=i.z.object({fileUrl:g,title:g.optional()}),pe=i.z.object({latitude:i.z.number(),longitude:i.z.number(),address:i.z.string().optional(),title:i.z.string().optional()}),L=i.z.object({title:g,subtitle:g.optional(),imageUrl:g.optional(),actions:i.z.array(i.z.object({action:i.z.enum(["postback","url","say"]),label:g,value:g}))}),_=i.z.object({text:g,options:i.z.array(i.z.object({label:g,value:g}))}),le=i.z.object({items:i.z.array(L)}),de={text:{schema:se},markdown:{schema:re},image:{schema:ae},audio:{schema:ie},video:{schema:ge},file:{schema:ce},location:{schema:pe},carousel:{schema:le},card:{schema:L},dropdown:{schema:_},choice:{schema:_}};var f="x-bot-id",U="x-bot-user-id",A="x-integration-id",k="x-webhook-id",m="x-bp-configuration",h="x-bp-operation",D="x-bp-type";var q=require("node:http");var T=console;function p(t){if(!t.body)throw new Error("Missing body");return JSON.parse(t.body)}async function y(t,e=8072,n=fe){let r=(0,q.createServer)(async(o,s)=>{try{let a=await Te(o);if(a.path==="/health"){s.writeHead(200).end("ok");return}let c=await t(a);s.writeHead(c?.status??200,c?.headers??{}).end(c?.body??"{}")}catch(a){T.error("Error while handling request",{error:a?.message??"Internal error occured"}),s.writeHead(500).end(JSON.stringify({error:a?.message??"Internal error occured"}))}});return r.listen(e,()=>n(e)),r}async function Te(t){let e=await Ie(t),n={};for(let o=0;o<t.rawHeaders.length;o+=2){let s=t.rawHeaders[o].toLowerCase(),a=t.rawHeaders[o+1];n[s]=a}let r=new URL(t.url??"",t.headers.host?`http://${t.headers.host}`:"http://botpress.cloud");return{body:e,path:r.pathname,query:ue(r.search,"?"),headers:n,method:t.method?.toUpperCase()??"GET"}}function ue(t,e){return t.indexOf(e)===0?t.slice(e.length):t}async function Ie(t){return new Promise((e,n)=>{if(t.method!=="POST"&&t.method!=="PUT"&&t.method!=="PATCH")return e(void 0);let r="";t.on("data",o=>r+=o.toString()),t.on("error",o=>n(o)),t.on("end",()=>e(r))})}function fe(t){T.info(`Listening on port ${t}`)}var j=require("zod");var me=j.z.enum(["webhook_received","message_created","action_triggered","register","unregister","ping","create_user","create_conversation"]),K=t=>{let e=t[f],n=t[U],r=t[A],o=t[k],s=t[m],a=me.parse(t[h]);if(!e)throw new Error("Missing bot headers");if(!n)throw new Error("Missing bot user headers");if(!r)throw new Error("Missing integration headers");if(!o)throw new Error("Missing webhook headers");if(!s)throw new Error("Missing configuration headers");if(!a)throw new Error("Missing operation headers");return{botId:e,botUserId:n,integrationId:r,webhookId:o,operation:a,configuration:s?JSON.parse(Buffer.from(s,"base64").toString("utf-8")):{}}};var b=class{name;version;title;description;icon;readme;configuration;events;actions;channels;states;user;secrets;identifier;constructor(e){let{name:n,version:r,icon:o,readme:s,title:a,description:c,configuration:d,events:l,actions:v,channels:C,states:R,user:M,secrets:Q,identifier:V}=e;this.name=n,this.version=r,this.icon=o,this.readme=s,this.title=a,this.identifier=V,this.description=c,this.configuration=d,this.events=l,this.actions=v,this.channels=C,this.states=R,this.user=M,this.secrets=Q}};var S=require("@botpress/client");var u=class{constructor(e){this.client=e}createConversation=e=>this.client.createConversation(e);getConversation=e=>this.client.getConversation(e);listConversations=e=>this.client.listConversations(e);getOrCreateConversation=e=>this.client.getOrCreateConversation(e);updateConversation=e=>this.client.updateConversation(e);deleteConversation=e=>this.client.deleteConversation(e);listParticipants=e=>this.client.listParticipants(e);addParticipant=e=>this.client.addParticipant(e);getParticipant=e=>this.client.getParticipant(e);removeParticipant=e=>this.client.removeParticipant(e);createEvent=e=>this.client.createEvent(e);getEvent=e=>this.client.getEvent(e);listEvents=e=>this.client.listEvents(e);createMessage=e=>this.client.createMessage(e);getOrCreateMessage=e=>this.client.getOrCreateMessage(e);getMessage=e=>this.client.getMessage(e);updateMessage=e=>this.client.updateMessage(e);listMessages=e=>this.client.listMessages(e);deleteMessage=e=>this.client.deleteMessage(e);createUser=e=>this.client.createUser(e);getUser=e=>this.client.getUser(e);listUsers=e=>this.client.listUsers(e);getOrCreateUser=e=>this.client.getOrCreateUser(e);updateUser=e=>this.client.updateUser(e);deleteUser=e=>this.client.deleteUser(e);getState=e=>this.client.getState(e);setState=e=>this.client.setState(e);patchState=e=>this.client.patchState(e);configureIntegration=e=>this.client.configureIntegration(e)};var H=G(require("util")),x=t=>{if(process.env.BP_LOG_FORMAT==="json")return JSON.stringify({msg:H.default.format(...t),visible_to_bot_owner:!0});{let[e,...n]=t;return H.default.format(`[For Bot Owner] ${e}`,...n)}},$={forBot:()=>({info:(...t)=>{console.info(x(t))},warn:(...t)=>{console.warn(x(t))},error:(...t)=>{console.error(x(t))},debug:(...t)=>{console.debug(x(t))}})};var N=t=>async e=>{let n=K(e.headers),r=new u(new S.Client({botId:n.botId,integrationId:n.integrationId})),o={ctx:n,req:e,client:r,logger:$,instance:t};try{let s;switch(n.operation){case"webhook_received":s=await ye(o);break;case"register":s=await ve(o);break;case"unregister":s=await Ce(o);break;case"message_created":s=await xe(o);break;case"action_triggered":s=await Se(o);break;case"ping":s=await he(o);break;case"create_user":s=await Be(o);break;case"create_conversation":s=await be(o);break;default:throw new Error(`Unknown operation ${n.operation}`)}return s?{...s,status:s.status??200}:{status:200}}catch(s){if(s instanceof S.RuntimeError)return{status:s.code,body:JSON.stringify(s.toJSON())};throw s}},he=async t=>{},ye=async({client:t,ctx:e,req:n,logger:r,instance:o})=>{let{req:s}=p(n);return o.webhook({client:t,ctx:e,req:s,logger:r})},ve=async({client:t,ctx:e,req:n,logger:r,instance:o})=>{if(!o.register)return;let{webhookUrl:s}=p(n);await o.register({client:t,ctx:e,webhookUrl:s,logger:r})},Ce=async({client:t,ctx:e,req:n,logger:r,instance:o})=>{if(!o.unregister)return;let{webhookUrl:s}=p(n);await o.unregister({ctx:e,webhookUrl:s,client:t,logger:r})},Be=async({client:t,ctx:e,req:n,logger:r,instance:o})=>{if(!o.createUser)return;let{tags:s}=p(n);return await o.createUser({ctx:e,client:t,tags:s,logger:r})},be=async({client:t,ctx:e,req:n,logger:r,instance:o})=>{if(!o.createConversation)return;let{channel:s,tags:a}=p(n);return await o.createConversation({ctx:e,client:t,channel:s,tags:a,logger:r})},xe=async({ctx:t,req:e,client:n,logger:r,instance:o})=>{let{conversation:s,user:a,type:c,payload:d,message:l}=p(e),v=o.channels[s.channel];if(!v)throw new Error(`Channel ${s.channel} not found`);let C=v.messages[c];if(!C)throw new Error(`Message of type ${c} not found in channel ${s.channel}`);await C({ctx:t,conversation:s,message:l,user:a,type:c,client:n,payload:d,ack:async({tags:M})=>{await n.updateMessage({id:l.id,tags:M})},logger:r})},Se=async({req:t,ctx:e,client:n,logger:r,instance:o})=>{let{input:s,type:a}=p(t);if(!a)throw new Error("Missing action type");let c=o.actions[a];if(!c)throw new Error(`Action ${a} not found`);let d=await c({ctx:e,input:s,client:n,type:a,logger:r});return{body:JSON.stringify({output:d})}};var P=class{props;actions;channels;register;unregister;createUser;createConversation;webhook;constructor(e){this.props=e,this.actions=e.actions,this.channels=e.channels,this.register=e.register,this.unregister=e.unregister,this.createUser=e.createUser,this.createConversation=e.createConversation,this.webhook=e.handler}handler=N(this);start=e=>y(this.handler,e)};var Z=G(require("@botpress/client"));var I=class{constructor(e){this.client=e}getConversation=e=>this.client.getConversation(e);listConversations=e=>this.client.listConversations(e);updateConversation=e=>this.client.updateConversation(e);deleteConversation=e=>this.client.deleteConversation(e);listParticipants=e=>this.client.listParticipants(e);addParticipant=e=>this.client.addParticipant(e);getParticipant=e=>this.client.getParticipant(e);removeParticipant=e=>this.client.removeParticipant(e);getEvent=e=>this.client.getEvent(e);listEvents=e=>this.client.listEvents(e);createMessage=e=>this.client.createMessage(e);getOrCreateMessage=e=>this.client.getOrCreateMessage(e);getMessage=e=>this.client.getMessage(e);updateMessage=e=>this.client.updateMessage(e);listMessages=e=>this.client.listMessages(e);deleteMessage=e=>this.client.deleteMessage(e);getUser=e=>this.client.getUser(e);listUsers=e=>this.client.listUsers(e);updateUser=e=>this.client.updateUser(e);deleteUser=e=>this.client.deleteUser(e);getState=e=>this.client.getState(e).then(n=>({state:{...n.state,payload:n.state.payload}}));setState=e=>this.client.setState(e).then(n=>({state:{...n.state,payload:n.state.payload}}));patchState=e=>this.client.patchState(e).then(n=>({state:{...n.state,payload:n.state.payload}}));callAction=e=>this.client.callAction(e);createConversation=e=>this.client.createConversation(e);getOrCreateConversation=e=>this.client.getOrCreateConversation(e);createUser=e=>this.client.createUser(e);getOrCreateUser=e=>this.client.getOrCreateUser(e)};var W=require("zod");var Pe=W.z.enum(["event_received","register","unregister","ping"]),z=t=>{let e=t[f],n=t[m],r=t[D],o=Pe.parse(t[h]);if(!e)throw new Error("Missing bot headers");if(!r)throw new Error("Missing type headers");if(!n)throw new Error("Missing configuration headers");if(!o)throw new Error("Missing operation headers");return{botId:e,operation:o,type:r,configuration:n?JSON.parse(Buffer.from(n,"base64").toString("utf-8")):{}}};var J=t=>async e=>{let n=z(e.headers);n.operation!=="ping"&&T.info(`Received ${n.operation} operation for bot ${n.botId} of type ${n.type}`);let r=new I(new Z.Client({botId:n.botId})),o={req:e,ctx:n,client:r,instance:t};switch(n.operation){case"event_received":await Ue(o);break;case"register":await Me(o);break;case"unregister":await we(o);break;case"ping":await Ee(o);break;default:throw new Error(`Unknown operation ${n.operation}`)}return{status:200}},Ee=async t=>{},Me=async t=>{},we=async t=>{},Ue=async({ctx:t,req:e,client:n,instance:r})=>{T.debug(`Received event ${t.type}`);let o=p(e),s=o.event;switch(t.type){case"message_created":let a={user:s.payload.user,conversation:s.payload.conversation,message:s.payload.message,states:s.payload.states,event:s};await Promise.all(r.messageHandlers.map(l=>l({client:n,ctx:t,...a})));break;case"state_expired":let c={state:s.payload.state};await Promise.all(r.stateExpiredHandlers.map(l=>l({client:n,ctx:t,...c})));break;default:let d={event:o.event};await Promise.all(r.eventHandlers.map(l=>l({client:n,ctx:t,...d})))}};var E=class{_state={messageHandlers:[],eventHandlers:[],stateExpiredHandlers:[]};props;constructor(e){this.props=e}message=e=>{this._state.messageHandlers.push(e)};event=e=>{this._state.eventHandlers.push(e)};stateExpired=e=>{this._state.stateExpiredHandlers.push(e)};handler=J(this._state);start=e=>y(this.handler,e)};0&&(module.exports={Bot,BotSpecificClient,Integration,IntegrationDefinition,IntegrationSpecificClient,botIdHeader,botUserIdHeader,configurationHeader,integrationIdHeader,messages,operationHeader,parseBody,serve,typeHeader,webhookIdHeader});
//# sourceMappingURL=index.js.map
